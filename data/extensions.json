[{"name":"videojs-chapter-thumbnails","description":"Video.js plugin for supporting chapter thumbnails","author":{"name":"Carey Hinoki","email":"carey.hinoki@gmail.com"},"keywords":["html5","player","video","videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2015-10-31T01:35:39.486Z","created":"2015-08-20T20:54:38.969Z","0.3.0":"2015-08-20T20:54:38.969Z","0.3.1":"2015-09-01T20:52:40.896Z","1.0.0":"2015-10-02T21:30:44.771Z","1.0.1":"2015-10-03T00:00:41.721Z","1.0.2":"2015-10-09T03:29:12.957Z","1.1.0":"2015-10-28T01:55:17.534Z","1.1.1":"2015-10-31T01:35:39.486Z"},"readme":"# videojs-chapter-thumbnails\n\n[![Build Status](https://travis-ci.org/chemoish/videojs-chapter-thumbnails.svg)](https://travis-ci.org/chemoish/videojs-chapter-thumbnails)\n\n> Video.js plugin for supporting **WebVTT** chapter thumbnails.\n\n![Example](https://github.com/chemoish/videojs-chapter-thumbnails/blob/master/asset/img/example.png?raw=true)\n\n## Getting Started\n\n#### Include\n\n```html\n<!-- optional: default styles -->\n<link href=\"/path/to/videojs.chapter-thumbnails.min.css\" rel=\"stylesheet\">\n\n<script src=\"/path/to/videojs.chapter-thumbnails.min.js\"></script>\n```\n\n#### Enable\n\n```js\nvideojs('player_id').chapter_thumbnails({\n    src: '/path/to/chapters.vtt'\n});\n```\n\n> Note: There are multiple ways to enable plugins. For more information, please visit [Video.js](https://github.com/videojs/video.js).\n\n## Options\n\n#### label\n\nType: `String`  \nDefault: `English`\n\n#### language\n\nType: `String`  \nDefault: `en`\n\n#### src\n\nType: `String`\n\n#### template\n\nType: `String`  \nDefault:\n\n```html\n<div class=\"vjs-chapters-thumbnails-item\">\n    <img class=\"vjs-chapters-thumbnails-item-image\" src=\"{{image}}\" />\n    <span class=\"vjs-chapters-thumbnails-item-title\">{{title}}</span>\n</div>\n```\n\nProvides for custom templating. Utilize `{{key}}` to target values in your WebVTT file.\n\n## Example WebVTT file\n\n> Define chapters plugin by specifying a [WebVTT](http://dev.w3.org/html5/webvtt/) spec.\n\n```\nWEBVTT\n\nChapter 1\n00:00:00.000 --> 00:00:10.000\n{\n    \"title\":\"Chapter 1\",\n    \"image\":\"asset/img/chapter_1.png\"\n}\n```\n\n## Contributing + Example\n\n```bash\nnpm install -g grunt-cli\n\nnpm install\n\nnpm start\n```\n\n## License\n\nCode licensed under [The MIT License](https://github.com/chemoish/videojs-chapter-thumbnails/blob/master/LICENSE).\n","version":"1.1.1","downloads":107},{"name":"videojs-concurrency","description":"[![Build Status](https://travis-ci.org/chemoish/videojs-concurrency.svg)](https://travis-ci.org/chemoish/videojs-concurrency)","author":{"name":"Carey Hinoki","email":"carey.hinoki@gmail.com","url":"http://www.careyhinoki.me/"},"keywords":["html5","player","video","videojs","videojs-plugin"],"license":"MIT","time":{"modified":"2015-10-09T03:33:09.923Z","created":"2015-08-27T02:34:28.367Z","0.1.0":"2015-08-27T02:34:28.367Z","0.1.1":"2015-08-27T02:40:28.980Z","1.0.0":"2015-10-01T17:34:32.745Z","1.0.1":"2015-10-09T03:33:09.923Z"},"readme":"# videojs-concurrency\n\n[![Build Status](https://travis-ci.org/chemoish/videojs-concurrency.svg)](https://travis-ci.org/chemoish/videojs-concurrency)\n\n> Video.js plugin for supporting concurrency.\n\n## Getting Started\n\n#### Include\n\n```html\n<script src=\"/path/to/videojs.concurrency.min.js\"></script>\n```\n\n#### Enable\n\n```js\nvideojs('player_id').concurrency({\n    url: '/path/to/concurrency.server',\n\n    success: function (response) {\n        this.poll();\n    }\n});\n```\n\n> Note: There are multiple ways to enable plugins. For more information, please visit [Video.js](https://github.com/videojs/video.js).\n\n## Options\n\n#### data\n\nType: `Object`  \n\n#### method\n\nType: `String`  \nDefault: `GET`\n\n#### url\n\nType: `String`  \n\n```js\n{\n    url: '/path/to/concurrency.server?foo=foo'\n}\n\n{\n    url: '/path/to/concurrency.server',\n    data: {\n        foo: 'foo'\n    }\n}\n```\n\n---\n\n#### success\n\nType: `successCallback(Response response)`  \nDefault: `noop`\n\nEnables polling manipulation on successful concurrency request.\n\n#### error\n\nType: `errorCallback(Error error)`  \nDefault: `noop`\n\nEnables polling manipulation on unsuccessful concurrency request.\n\n---\n\n#### idle_delay\n\nType: `Number`  \nDefault: `1000 * 60 * 30`\n\nWhen paused, become idle after 30 minutes.\n\n#### poll_delay\n\nType: `Number`  \nDefault: `1000 * 20`\n\nPoll every 20 seconds.\n\n---\n\n#### debug\n\nType: `Boolean`  \nDefault: `false`\n\n## Contributing + Example\n\n```bash\nnpm install\n\nnpm start\n```\n\n## Testing\n\n```bash\nkarma start\n\n# single run\nnpm test\n\n```\n\n## License\n\nCode licensed under [The MIT License](https://github.com/chemoish/videojs-concurrency/blob/master/LICENSE).\n","version":"1.0.1","downloads":65},{"name":"videojs-contrib-hls","description":"A video.js tech that plays HLS video on platforms that don't support it but have Flash.","keywords":["videojs","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2015-10-22T05:15:08.579Z","created":"2014-04-11T22:28:32.355Z","0.4.0":"2014-04-11T22:28:32.355Z","0.4.1":"2014-04-14T21:10:08.474Z","0.5.0":"2014-04-18T15:00:29.624Z","0.6.0":"2014-05-16T19:00:42.402Z","0.7.0":"2014-05-30T15:58:05.491Z","0.7.1":"2014-06-05T16:51:40.300Z","0.7.2":"2014-06-13T16:10:30.138Z","0.8.0":"2014-06-26T17:56:30.403Z","0.8.1":"2014-07-02T19:30:13.980Z","0.8.2":"2014-07-09T17:23:23.340Z","0.8.3":"2014-07-25T15:37:19.103Z","0.8.4":"2014-08-15T19:34:53.355Z","0.9.0":"2014-09-09T13:49:33.023Z","0.9.1":"2014-09-29T20:28:08.751Z","0.9.2":"2014-10-10T16:00:13.816Z","0.10.0":"2014-10-31T14:18:05.863Z","0.10.1":"2014-11-25T22:36:01.876Z","0.10.2":"2015-01-06T19:54:31.001Z","0.10.3":"2015-01-07T22:03:00.685Z","0.10.4":"2015-02-09T18:42:04.793Z","0.11.0":"2015-03-02T23:02:56.436Z","0.11.1":"2015-03-11T21:31:44.454Z","0.11.2":"2015-03-20T18:55:50.510Z","0.12.0":"2015-04-02T21:17:37.146Z","0.13.0":"2015-04-16T20:32:57.125Z","0.13.1":"2015-04-28T22:10:26.719Z","0.14.0":"2015-05-05T19:23:51.624Z","0.15.0":"2015-05-08T18:56:18.939Z","0.16.0":"2015-05-19T21:54:03.708Z","0.16.1":"2015-05-29T20:00:49.667Z","0.17.0":"2015-06-05T22:31:54.308Z","0.17.1":"2015-06-08T23:13:59.171Z","0.17.2-0":"2015-06-10T19:09:04.536Z","0.17.2-1":"2015-06-10T23:38:42.657Z","0.17.2":"2015-06-15T18:53:13.218Z","0.17.3":"2015-06-29T15:32:31.060Z","0.17.4":"2015-07-13T02:55:55.715Z","0.17.5":"2015-07-14T14:54:54.845Z","0.17.6":"2015-07-29T22:13:42.615Z","0.17.7":"2015-08-11T16:34:55.253Z","0.17.8":"2015-08-11T21:57:17.234Z","0.17.9":"2015-09-04T17:29:04.885Z","1.0.1-0":"2015-10-22T05:15:08.579Z"},"readme":"# video.js HLS Tech\n\nA video.js tech that plays HLS video on platforms that don't support it but have Flash.\n\n[![Build Status](https://travis-ci.org/videojs/videojs-contrib-hls.svg?branch=master)](https://travis-ci.org/videojs/videojs-contrib-hls)\n\n## Getting Started\nDownload [videojs-contrib-media-sources](https://github.com/videojs/videojs-contrib-media-sources/releases) and [videojs-contrib-hls](https://github.com/videojs/videojs-contrib-hls/releases). Include them both in your web page along with video.js:\n\n```html\n<video id=example-video width=600 height=300 class=\"video-js vjs-default-skin\" controls>\n  <source\n     src=\"https://example.com/index.m3u8\"\n     type=\"application/x-mpegURL\">\n</video>\n<script src=\"video.js\"></script>\n<script src=\"videojs-media-sources.js\"></script>\n<script src=\"videojs-hls.min.js\"></script>\n<script>\nvar player = videojs('example-video');\nplayer.play();\n</script>\n```\n\nCheck out our [live example](http://videojs.github.io/videojs-contrib-hls/) if you're having trouble.\n\n## Documentation\n[HTTP Live Streaming](https://developer.apple.com/streaming/) (HLS) has\nbecome a de-facto standard for streaming video on mobile devices\nthanks to its native support on iOS and Android. There are a number of\nreasons independent of platform to recommend the format, though:\n\n- Supports (client-driven) adaptive bitrate selection\n- Delivered over standard HTTP ports\n- Simple, text-based manifest format\n- No proprietary streaming servers required\n\nUnfortunately, all the major desktop browsers except for Safari are\nmissing HLS support. That leaves web developers in the unfortunate\nposition of having to maintain alternate renditions of the same video\nand potentially having to forego HTML-based video entirely to provide\nthe best desktop viewing experience.\n\nThis tech attempts to address that situation by providing a polyfill\nfor HLS on browsers that have Flash support. You can deploy a single\nHLS stream, code against the regular HTML5 video APIs, and create a\nfast, high-quality video experience across all the big web device\ncategories.\n\nCheck out the [full documentation](docs/) for details on how HLS works\nand advanced configuration. A description of the [adaptive switching\nbehavior](docs/bitrate-switching.md) is available, too.\n\nThe videojs-hls tech is still working towards a 1.0 release so it\nmay not fit your requirements today. Specifically, there is _no_\nsupport for:\n\n- Alternate audio and video tracks\n- Subtitles\n- Segment codecs _other than_ H.264 with AAC audio\n- Internet Explorer < 10\n\n### Options\n\nYou may pass in an options object to the hls tech at player\ninitialization. You can pass in options just like you would for any\nother tech:\n\n```javascript\nvideojs(video, {\n  hls: {\n    withCredentials: true\n  }\n});\n```\n\n#### withCredentials\nType: `boolean`\n\nWhen the `withCredentials` property is set to `true`, all XHR requests for\nmanifests and segments would have `withCredentials` set to `true` as well. This\nenables storing and passing cookies from the server that the manifests and\nsegments live on. This has some implications on CORS because when set, the\n`Access-Control-Allow-Origin` header cannot be set to `*`, also, the response\nheaders require the addition of `Access-Control-Allow-Credentials` header which\nis set to `true`.\nSee html5rocks's [article](http://www.html5rocks.com/en/tutorials/cors/)\nfor more info.\n\n### Runtime Properties\n#### player.hls.playlists.master\nType: `object`\n\nAn object representing the parsed master playlist. If a media playlist\nis loaded directly, a master playlist with only one entry will be\ncreated.\n\n#### player.hls.playlists.media\nType: `function`\n\nA function that can be used to retrieve or modify the currently active\nmedia playlist. The active media playlist is referred to when\nadditional video data needs to be downloaded. Calling this function\nwith no arguments returns the parsed playlist object for the active\nmedia playlist. Calling this function with a playlist object from the\nmaster playlist or a URI string as specified in the master playlist\nwill kick off an asynchronous load of the specified media\nplaylist. Once it has been retreived, it will become the active media\nplaylist.\n\n#### player.hls.mediaIndex\nType: `number`\n\nThe index of the next video segment to be downloaded from\n`player.hls.media`.\n\n#### player.hls.segmentXhrTime\nType: `number`\n\nThe number of milliseconds it took to download the last media segment.\nThis value is updated after each segment download completes.\n\n#### player.hls.bandwidth\nType: `number`\n\nThe number of bits downloaded per second in the last segment download.\nThis value is used by the default implementation of `selectPlaylist`\nto select an appropriate bitrate to play.\n\nBefore the first video segment has been downloaded, it's hard to\nestimate bandwidth accurately. The HLS tech uses a heuristic based on\nthe playlist download times to do this estimation by default. If you\nhave a more accurate source of bandwidth information, you can override\nthis value as soon as the HLS tech has loaded to provide an initial\nbandwidth estimate.\n\n#### player.hls.bytesReceived\nType: `number`\n\nThe total number of content bytes downloaded by the HLS tech.\n\n#### player.hls.selectPlaylist\nType: `function`\n\nA function that returns the media playlist object to use to download\nthe next segment. It is invoked by the tech immediately before a new\nsegment is downloaded. You can override this function to provide your\nadaptive streaming logic. You must, however, be sure to return a valid\nmedia playlist object that is present in `player.hls.master`.\n\n### Events\n#### loadedmetadata\n\nFired after the first media playlist is downloaded for a stream.\n\n#### loadedplaylist\n\nFired immediately after a new master or media playlist has been\ndownloaded. By default, the tech only downloads playlists as they\nare needed.\n\n#### mediachange\n\nFired when a new playlist becomes the active media playlist. Note that\nthe actual rendering quality change does not occur simultaneously with\nthis event; a new segment must be requested and the existing buffer\ndepleted first.\n\n### In-Band Metadata\nThe HLS tech supports [timed\nmetadata](https://developer.apple.com/library/ios/#documentation/AudioVideo/Conceptual/HTTP_Live_Streaming_Metadata_Spec/Introduction/Introduction.html)\nembedded as [ID3 tags](http://id3.org/id3v2.3.0). When a stream is\nencountered with embedded metadata, an [in-band metadata text\ntrack](https://html.spec.whatwg.org/multipage/embedded-content.html#text-track-in-band-metadata-track-dispatch-type)\nwill automatically be created and populated with cues as they are\nencountered in the stream. UTF-8 encoded\n[TXXX](http://id3.org/id3v2.3.0#User_defined_text_information_frame)\nand [WXXX](http://id3.org/id3v2.3.0#User_defined_URL_link_frame) ID3\nframes are mapped to cue points and their values set as the cue\ntext. Cues are created for all other frame types and the data is\nattached to the generated cue:\n\n```js\ncue.frame.data\n```\n\nThere are lots of guides and references to using text tracks [around\nthe web](http://www.html5rocks.com/en/tutorials/track/basics/).\n\n### Testing\n\nFor testing, you can either run `npm test` or use `grunt` directly.\nIf you use `npm test`, it will only run the karma and end-to-end tests using chrome.\nYou can specify which browsers you want the tests to run via grunt's `test` task.\nYou can use either grunt-style arguments or comma separated arguments:\n```\ngrunt test:chrome:firefox\t# grunt-style\ngrunt test:chrome,firefox\t# comma-separated\n```\nPossible options are:\n* `chromecanary`\n* `phantomjs`\n* `opera`\n* `chrome`<sup>1</sup>\n* `safari`<sup>1, 2</sup>\n* `firefox`<sup>1</sup>\n* `ie`<sup>1</sup>\n\n\n_<sup>1</sup>supported end-to-end browsers_<br />\n_<sup>2</sup>requires the [SafariDriver extension]( https://code.google.com/p/selenium/wiki/SafariDriver) to be installed_\n\n## Hosting Considerations\nUnlike a native HLS implementation, the HLS tech has to comply with\nthe browser's security policies. That means that all the files that\nmake up the stream must be served from the same domain as the page\nhosting the video player or from a server that has appropriate [CORS\nheaders](https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS)\nconfigured. Easy [instructions are\navailable](http://enable-cors.org/server.html) for popular webservers\nand most CDNs should have no trouble turning CORS on for your account.\n\n## Release History\nCheck out the [changelog](CHANGELOG.md) for a summary of each release.\n","version":"0.17.9","downloads":646},{"name":"videojs-dock","description":"Dock plugin for videojs","author":{"name":"Gary Katsevman","email":"me@gkatsev.com"},"keywords":["videojs-plugin","dock","videojs"],"license":"Apache-2.0","time":{"modified":"2015-09-25T19:30:38.378Z","created":"2015-09-22T15:49:28.909Z","0.0.0":"2015-09-22T15:49:28.909Z","1.0.0":"2015-09-22T15:49:53.294Z","1.0.1":"2015-09-22T19:06:49.623Z","1.0.2":"2015-09-23T22:36:04.598Z","1.0.3":"2015-09-25T19:30:38.378Z"},"readme":"# Dock plugin for videojs\n\n### Building\nYou should either include this project directly in your browserify or you can build it by running\n`npm run build`\n\n### Running tests\nYou can run a single test run, which includes running jshint as well as karma by running\n```sh\nnpm test\n```\nFor development, consider running\n```sh\nnpm run test-watch\n```\nWhich will re-run the karma tests as you save your files to let you know your test results automatically.\n\n## [LICENSE](https://github.com/brightcove/videojs-dock/blob/master/LICENSE.md)\n","version":"1.0.3","downloads":95},{"name":"videojs-ooyala","description":"Video.js plugin to fetch videos from Ooyala","author":{"name":"Peter Mekhaeil","email":"peter.mekhaeil@news.com.au"},"keywords":["videojs","videojs-plugin","ooyala","video","player"],"license":"MIT","time":{"modified":"2015-10-27T00:24:38.945Z","created":"2015-10-19T03:58:01.044Z","0.2.0":"2015-10-19T03:58:01.044Z","0.3.0":"2015-10-26T23:50:04.295Z","0.3.1":"2015-10-26T23:58:05.827Z","0.3.2":"2015-10-27T00:24:38.945Z"},"readme":"# videojs.ooyala.js\r\n\r\nVideo.js plugin to fetch videos from Ooyala. By supplying an Ooyala EmbedCode, the plugin will call the Ooyala API and fetch the video source of that EmbedCode.\r\n\r\n## Demo\r\n\r\nRun ```grunt``` on the project folder will serve up a server at ```localhost:3000/demo``` which provides a demo page.\r\n\r\n## Usage\r\n\r\nInclude ```./dist/videojs.ooyala.js``` after video.js.\r\n\r\nEnable the plugin once your player has been initialised:\r\n\r\n```js\r\nplayer.ooyala({\r\n    playerBrandingId: (String), // Ooyala Player Branding ID (Required)\r\n    pcode: (String),             // Ooyala Provider ID (Required)\r\n    enableHls: (Boolean),        // Tweak force returning m3u8 from Ooyala if available (Optional)\r\n    mobileProfile: (String)     // SAS profile to narrow down streams for mobile devices (Optional)\r\n});\r\n```\r\n\r\n### Set an Ooyala video to the player:\r\nIf you want to set an Ooyala video to the player and prepare it for playback:\r\n\r\n```js\r\nplayer.ooyala.setSource(embedCode, callback);\r\n// embedCode: (String) The Ooyala video EmbedCode (Required)\r\n// callback: (Function) Returns the results of getVideoSource(), see below (Optional).\r\n```\r\n\r\n### Get video source from Ooyala\r\nIf you need to get the video source from ooyala for other use:\r\n\r\n```js\r\nplayer.ooyala.getVideoSource(embedCodes, callback);\r\n// embedCodes: (String/Array) The Ooyala video EmbedCodes. Can be multiple videos. (Required)\r\n// callback: (Function) Callback function once data is fetched. (Required)\r\n```\r\nCallback function will have `err` and `res` as argument, here is an example of callback results:\r\n\r\n```javascript\r\n{\r\n    apiResponse: 'the complete response from the Ooyala API as a JSON object'\r\n    videoUrls: {\r\n        embedCode1: {\r\n                authorized: 'true',         // If we are authorised to use this video\r\n                src: 'Video URL',           // If authorised is true, this is defined.\r\n                type: 'Video Type'          // If authorised is true, this is defined.\r\n        },\r\n        embedCode2: {\r\n                authorized: 'false',\r\n                message: 'Error Message',   // If authorised is false, this is defined.\r\n                code: 'Error Code'          // If authorised is false, this is defined.\r\n        }\r\n    }\r\n}\r\n```\r\n`src` and `type` are only set if `authorized` is true. You can then set these to the player, for example:\r\n\r\n```js\r\nplayer.ooyala.getVideoSource('myEmbedCode1, myEmbedCode2', function(err, res) {\r\n    var videoResult = res && res['myEmbedCode1'];\r\n\r\n    if (videoResult.authorized) {\r\n      player.src({\r\n          type: videoResult.type,\r\n          src: videoResult.src\r\n      });\r\n    }\r\n})\r\n```\r\n\r\n### Get the meta data of an Ooyala video\r\nOoyala videos have meta data that we can extract based on the embedCode.\r\n\r\n```js\r\nplayer.ooyala.getMetadata(embedCode, callback)\r\n// embedCodes: (String/Array) The Ooyala video EmbedCodes. Can be multiple videos. (Required)\r\n// callback: (Function) Callback function once metadata is fetched (Required)\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nplayer.ooyala.getMetadata(embedCode, function(err, res) {\r\n    console.log('metadata', embedCode, res);\r\n})\r\n```\r\n\r\n## Player support\r\n\r\nThis plugin has been tested with:\r\n\r\n- Video.Js 4.12.15\r\n- Brightcove Perform Player v1.24.22\r\n\r\n## IE Browser compatibility\r\n\r\nThis plugin uses the following functions so if you need support for a particular version of IE, you will need to implement a polyfill within your application.\r\n\r\n| Function      | IE Version Supported  |\r\n|-------------  |---------------------- |\r\n| Object.keys   | IE9+                  |\r\n| window.atob   | IE10+                 |\r\n\r\n## Contributing\r\n\r\nBug fixes are always welcome, though for new functionality it's best to raise an issue first.\r\nWe appreciate that all contribution follow our style guide set in our JSHint and JSCS using  [Grunt](http://gruntjs.com/).\r\n\r\n## History\r\n\r\n### v0.3.0\r\n* Retry XHR calls on timeout\r\n* Add video.js error messages on failed XHR calls\r\n\r\n### v0.2.0\r\n* Add enableHls and mobileProfile option.\r\n* Add prepareSettingSource() to allow developer to prepare video source before setting to video player.\r\n\r\n### v0.1.0\r\n* First release","version":"0.3.2","downloads":51},{"name":"videojs-playlist","description":"Playlist plugin for videojs","author":{"name":"Gary Katsevman","email":"me@gkatsev.com"},"keywords":["videojs-plugin","playlist","videojs"],"license":"Apache 2.0","time":{"modified":"2015-08-24T17:17:53.588Z","created":"2015-03-30T19:36:21.025Z","1.0.0":"2015-03-30T19:36:21.025Z","1.0.1":"2015-03-30T19:56:41.488Z","1.0.2":"2015-04-09T16:34:07.887Z","1.0.3":"2015-08-24T17:17:53.588Z"},"readme":"[![Build Status](https://travis-ci.org/brightcove/videojs-playlist.svg?branch=master)](https://travis-ci.org/brightcove/videojs-playlist)\n\n# Playlist plugin for videojs\n\n## Usage\n\n```js\nrequire('videojs-playlist');\n\nvar player = videojs('video');\nplayer.playlist([{\n  sources: [{\n    src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/bunny/trailer.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n}, {\n  sources: [{\n    src: 'http://vjs.zencdn.net/v/oceans.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://www.videojs.com/img/poster.jpg'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/bunny/movie.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/video/movie_300.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/video/poster.png'\n}]);\n\nplayer.playlist.next();\n```\n\n## API\n\n* [Methods](#methods)\n  * [`player.playlist([Array newPlaylist])`](#playerplaylistarray-newplaylist---array)\n  * [`player.playlist.currentItem([Number newIndex])`](#playerplaylistcurrentitemnumber-newindex---number)\n  * [`player.playlist.contains(Any item)`](#playerplaylistcontainsany-item---boolean)\n  * [`player.playlist.indexOf(Any item)`](#playerplaylistindexofany-item---number)\n  * [`player.playlist.next()`](#playerplaylistnext---object)\n  * [`player.playlist.previous()`](#playerplaylistprevious---object)\n  * [`player.playlist.autoadvance()`](#playerplaylistautoadvancenumber-timeout---undefined)\n* [Events](#events)\n  * [`playlistchange`](#playlistchange)\n\n### Methods\n#### `player.playlist([Array newPlaylist]) -> Array`\nThis function allows you to either set or get the current playlist.\nIf called without arguments, it is a getter, with an argument, it is a setter.\n\n```js\nplayer.playlist();\n// [{\n//   sources: [{\n//     src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n//     type: 'video/mp4'\n//   }],\n//   poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n// }, {\n//   sources: [{\n//     src: 'http://media.w3.org/2010/05/bunny/trailer.mp4',\n//     type: 'video/mp4'\n//   }],\n// ...\n\nplayer.playlist([{\n  sources: [{\n    src: 'http://media.w3.org/2010/05/video/movie_300.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/video/poster.png'\n}]);\n// [{\n//   sources: [{\n//     src: 'http://media.w3.org/2010/05/video/movie_300.mp4',\n//     type: 'video/mp4'\n//   }],\n//   poster: 'http://media.w3.org/2010/05/video/poster.png'\n// }]\n```\n\n#### `player.playlist.currentItem([Number newIndex]) -> Number`\nThis functions allows you to either set or get the current item index.\nIf called without arguments, it is a getter, with an argument, it is a setter.\n\nIf the player is currently playing a non-playlist video, `currentItem` will return `-1`.\n\n```js\nplayer.currentItem();\n// 0\n\nplayer.currentItem(2);\n// 2\n```\n\n```js\nplayer.playlist(samplePlaylist);\nplayer.src('http://example.com/video.mp4');\nplayer.playlist.currentItem(); // -1\n```\n\n#### `player.playlist.contains(Any item) -> Boolean`\nThis function allows you to ask the playlist whether a string, source object, or playlist item is contained within it.\nAssuming the above playlist, consider the following example:\n\n```js\nplaylist.contains('http://media.w3.org/2010/05/sintel/trailer.mp4')\n// true\n\nplaylist.contains([{\n  src: 'http://media.w3.org/2010/05/sintel/poster.png',\n  type: 'image/png'\n}])\n// false\n\nplaylist.contains({\n  sources: [{\n    src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n    type: 'video/mp4'\n  }]\n});\n// true\n```\n\n#### `player.playlist.indexOf(Any item) -> Number`\nThis function allows you to ask the playlist whether a string, source object, or playlist item is contained within it and at what index. It returns `-1` for non-existent items, otherwise, the corresponding index.\nAssuming the above playlist, consider the following example:\n\n```js\nplaylist.indexOf('http://media.w3.org/2010/05/bunny/trailer.mp4')\n// 1\n\nplaylist.contains([{\n  src: 'http://media.w3.org/2010/05/bunny/movie.mp4',\n  type: 'video/mp4'\n}])\n// 3\n\nplaylist.contains({\n  sources: [{\n    src: 'http://media.w3.org/2010/05/video/movie_300.mp4',\n    type: 'video/mp4'\n  }]\n});\n// 4\n```\n\n#### `player.playlist.next() -> Object`\nThis functions allows you to advance to the next item in the playlist. You will receive the new playlist item back from this call. `player.playlist.currentItem` will be updated to return the new index.\nIf you are at the end of the playlist, you will not be able to proceed past the end and instead will not receive anything back;\n\n```js\nplayer.playlist.next();\n// {\n//   sources: [{\n//     src: 'http://media.w3.org/2010/05/bunny/trailer.mp4',\n//     type: 'video/mp4'\n//   }],\n//   poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n// }\n\n\nplayer.playlist.currenItem(player.playlist().length - 1); // set to last item\n// 4\nplayer.playlist.next();\n// undefined\n```\n\n#### `player.playlist.previous() -> Object`\nThis functions allows you to return to the previous item in the playlist. You will receive the new playlist item back from this call. `player.playlist.currentItem` will be updated to return the new index.\nIf you are at the start of the playlist, you will not be able to proceed past the start and instead will not receive anything back;\n\n```js\nplayer.playlist.currenItem(1); // set to second item in the playlist\n// 1\nplayer.playlist.previous();\n// {\n//   sources: [{\n//     src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n//     type: 'video/mp4'\n//   }],\n//   poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n// }\n\n\nplayer.playlist.currenItem();\n// 0\nplayer.playlist.previous();\n// undefined\n```\n\n#### `player.playlist.autoadvance([Number timeout]) -> undefined`\nThis function allows you to set up playlist auto advancement. Once enabled it will wait a `timeout` amount of seconds at the end of a video before proceeding automatically to the next video.\nAny value which is not a positive, finite, integer, will be treated as a request to cancel and reset the auto advancing.\nIf you change autoadvance during a timeout period, the auto advance will be canceled and it will not advance the next video but it will use the new timeout value for the following videos.\n\n```js\nplayer.playlist.autoadvance(0); // will not wait before loading in the next item\nplayer.playlist.autoadvance(5); // will wait for 5 seconds before loading in the next item\nplayer.playlist.autoadvance(null); // reset and cancel the auto advance\n```\n\n### Events\n\n#### `playlistchange`\nThis event is fired asynchronously whenever the playlist is changed.\nIt is fired asynchronously to let the browser start loading the first video in the new playlist.\n\n```js\nplayer.on('playlistchange', function() {\n  console.log(player.playlist());\n});\n\nplayer.playlist([1,2,3]);\n// [1,2,3]\n\nplayer.playlist([4,5,6]);\n// [4,5,6]\n```\n\n## Development\n\n### npm scripts\n* `npm run build` - Build `dist/bundle.js` file only. Alias for `build-dist`\n* `npm run watch` - Watch and rebuild `dist/bundle.js` and `dist/tests.js` files as necessary\n* `npm run buildall` - Build both `dist/bundle.js` and `dist/tests.js`\n* `npm run build-dist` - Build only `dist/bundle.js`\n* `npm run watch-dist` - watch and rebuild `dist/bundle.js` file as necessary\n* `npm run build-tests` - Build only `dist/tests.js`\n* `npm run watch-tests` - watch and rebuild `dist/tests.js` file as necessary\n* `npm test` - Run jshint on all javascript files, build `dist/tests.js` file, and do a single run of karma\n* `npm run test-watch` - Watch and rebuild `dist/tests.js` file as necessary and run karma watch to re-run tests as necessary\n* `npm run jshint` - Just run jshint on all files\n\n### Building\nYou should either include this project directly in your browserify or you can build it by running\n`npm run build`\n\n### Running tests\nYou can run a single test run, which includes running jshint as well as karma by running\n```sh\nnpm test\n```\nFor development, consider running\n```sh\nnpm run test-watch\n```\nWhich will re-run the karma tests as you save your files to let you know your test results automatically.\n\n## [LICENSE](https://github.com/brightcove/videojs-playlist/blob/master/LICENSE.md)\n","version":"1.0.3","downloads":217},{"name":"videojs-playlist-ui","description":"A playlist video picker for video.js","author":{"name":"Brightcove"},"keywords":["videojs-plugin","playlist","videojs"],"license":"Apache-2.0","time":{"modified":"2015-08-06T20:19:57.552Z","created":"2015-03-30T19:28:42.727Z","1.0.0":"2015-03-30T19:28:42.727Z","1.0.1":"2015-03-30T19:55:12.132Z","1.0.2":"2015-06-25T21:11:36.159Z","1.0.3":"2015-08-03T15:57:56.690Z","1.0.4":"2015-08-06T20:19:57.552Z"},"readme":"[![Build Status](https://travis-ci.org/brightcove/videojs-playlist-ui.svg?branch=master)](https://travis-ci.org/brightcove/videojs-playlist-ui)\n\n# Video.js Playlist UI\n\nA playlist video picker for video.js\n\n## Getting Started\n\nInclude the plugin script in your page, and a placeholder list element\nwith the class `vjs-playlist` to house the playlist menu:\n\n```html\n<!-- Include the playlist menu styles somewhere in your page: -->\n<link href=\"videojs-playlist-ui.vertical.css\" rel=\"stylesheet\">\n\n<!-- The playlist menu will be built automatically in here: -->\n<ol class=\"vjs-playlist\"></ol>\n\n<!-- Include video.js, the videojs-playlist plugin and this plugin: -->\n<script src=\"video.js\"></script>\n<script src=\"videojs-playlist.js\"></script>\n<script src=\"videojs-playlist-ui.js\"></script>\n\n<script>\n  // Now you can initialize the plugin and build the playlist whenever\n  // you're ready!\n  videojs(document.querySelector('video')).playlistUi();\n</script>\n```\n\nThere's also a [working example](example.html) of the plugin you can\ncheck out if you're having trouble.\n\n## Documentation\n\n### Plugin Options\n\nYou may pass in an options object to the plugin upon initialization.\nThe PlaylistMenu is a regular [video.js\nComponent](https://github.com/videojs/video.js/blob/master/docs/guides/components.md)\nso you may pass in [any\noption](https://github.com/videojs/video.js/blob/master/docs/guides/options.md#component-options)\nthat is accepted by Components. In addition, this object may contain\nthis specialized property:\n\n#### className\nType: `string`\nDefault: \"vjs-playlist\"\n\nThe name of the class to search for to populate the playlist menu.\n\n#### playOnSelect\nType: `Boolean`\nDefault: false\n\nThe default behavior is that the play state is expected to stay the same between videos, if playing continue playing and if paused stay paused when playlist menu items are clicked. When this boolean is set to true, clicking on the playlist menu items will always play the video.\n\n## Playlists and Advertisements\n\nThe Playlist Menu automatically adapts to ad integrations based on\n[videojs-contrib-ads](https://github.com/videojs/videojs-contrib-ads). When\na linear ad is being played, the menu will darken and stop responding\nto click or touch events. If you'd prefer to allow your viewers to\nchange videos during ad playback, you can override this behavior\nthrough CSS. You will also need to make sure that your ad integration\nis properly cancelled and cleaned up before switching-- consult the\ndocumentation for your ad library for details on how to do that.\n\n## Release History\n\n - 0.1.0: Initial release\n","version":"1.0.4","downloads":223},{"name":"videojs-record","description":"A video.js plugin for recording audio/video/image files.","keywords":["waveform","audio","video","wavesurfer","videojs","videojs-plugin","player","record","stream","recorder","RecordRTC","libvorbis.js","vorbis","ogg"],"license":"MIT","time":{"modified":"2015-10-18T22:13:49.775Z","created":"2015-01-06T20:20:38.870Z","0.2.0":"2015-01-06T20:20:38.870Z","0.3.0":"2015-02-11T11:15:48.006Z","0.4.0":"2015-02-19T17:00:11.250Z","0.5.0":"2015-02-21T00:48:23.781Z","0.6.0":"2015-03-23T22:13:49.270Z","0.7.0":"2015-03-28T19:33:06.445Z","0.8.0":"2015-03-29T23:06:48.105Z","0.8.1":"2015-03-29T23:37:09.434Z","0.8.2":"2015-03-30T16:14:52.111Z","0.8.3":"2015-07-09T21:16:33.883Z","0.8.4":"2015-08-26T23:32:04.485Z","0.9.0":"2015-09-25T13:24:35.211Z","0.9.1":"2015-10-04T20:04:12.136Z","0.9.2":"2015-10-06T08:52:45.949Z","0.9.3":"2015-10-12T20:27:53.438Z","1.0.0":"2015-10-14T20:06:20.497Z","1.0.1":"2015-10-15T13:10:22.353Z","1.0.2":"2015-10-18T22:13:49.775Z"},"readme":"Video.js Record\n===============\n\nA Video.js plugin for recording audio/video/image files.\n\n<img title=\"Screenshot\" src=\"examples/img/screenshot.png?raw=true\" width=\"329\">\n\n[![npm version](https://img.shields.io/npm/v/videojs-record.svg?style=flat)](https://www.npmjs.com/package/videojs-record)\n[![npm](https://img.shields.io/npm/dm/videojs-record.svg)]()\n[![License](https://img.shields.io/npm/l/videojs-record.svg)](LICENSE)\n[![Build Status](https://travis-ci.org/collab-project/videojs-record.svg?branch=master)](https://travis-ci.org/collab-project/videojs-record)\n\nInstallation\n------------\n\nUse [bower](http://bower.io) (`bower install videojs-record`) or\n[npm](https://www.npmjs.org) (`npm install videojs-record`) to install\nthe plugin or [download](https://github.com/collab-project/videojs-record/releases)\nthe library and dependencies elsewhere.\n\nSince v1.0 this plugin is compatible with video.js 5.0 and newer. If you want to use\nthis plugin with an older video.js 4.x version, check the\n[archived releases](https://github.com/collab-project/videojs-record/releases)\nfor a 0.9.x or older release.\n\nDependencies\n------------\n\nThe plugin has the following mandatory dependency:\n\n- [Video.js](https://github.com/videojs/video.js) - HTML5 media player that provides the user interface.\n\nWhen recording audio and/or video you also need:\n\n- [RecordRTC.js](https://github.com/muaz-khan/RecordRTC) - Adds support for audio/video/GIF recording.\n\nAnd when recording audio-only, the following dependencies are also required:\n\n- [wavesurfer.js](https://github.com/katspaugh/wavesurfer.js) - Provides a navigable waveform for audio files. Comes with a [microphone plugin](http://www.wavesurfer-js.org/example/microphone) used for realtime visualization of the microphone audio signal.\n- [videojs-wavesurfer](https://github.com/collab-project/videojs-wavesurfer) - Transforms Video.js into an audio-player.\n\nOptional dependencies for other output formats:\n\n- [libvorbis.js](https://github.com/Garciat/libvorbis.js) - Converts PCM audio data to compressed Ogg Vorbis audio, resulting a smaller audio files with similar quality.\n\nUsage\n-----\n\nStart by including the video.js stylesheet and library:\n\n```html\n<link href=\"//vjs.zencdn.net/5.0/video-js.css\" rel=\"stylesheet\">\n<script src=\"//vjs.zencdn.net/5.0/video.js\"></script>\n```\n\nIf you're going to record audio and/or video you need to include RecordRTC as well:\n\n```html\n<script src=\"//cdn.webrtc-experiment.com/RecordRTC.js\"></script>\n```\n\nThe videojs-record plugin automatically registers itself when the script\nis included on the page:\n\n```html\n<script src=\"videojs.record.js\"></script>\n```\n\nAdd the extra stylesheet for the plugin that includes a\n[custom font](src/css/font) with additional icons:\n\n```html\n<link href=\"videojs.record.css\" rel=\"stylesheet\">\n```\n\n### Audio/video/image\n\nWhen recording either audio/video, video-only, animated GIF or a single image,\ninclude a `video` element:\n\n```html\n<video id=\"myVideo\" class=\"video-js vjs-default-skin\"></video>\n```\n\nCheck out the full audio/video\n([demo](https://collab-project.github.io/videojs-record/examples/audio-video.html) / [source](https://github.com/collab-project/videojs-record/blob/master/examples/audio-video.html)),\nimage ([demo](https://collab-project.github.io/videojs-record/examples/image-only.html) / [source](https://github.com/collab-project/videojs-record/blob/master/examples/image-only.html)),\nanimated GIF ([demo](https://collab-project.github.io/videojs-record/examples/animated-gif.html) / [source](https://github.com/collab-project/videojs-record/blob/master/examples/animated-gif.html)) or the\nvideo-only ([demo](https://collab-project.github.io/videojs-record/examples/video-only.html) or [source](https://github.com/collab-project/videojs-record/blob/master/examples/video-only.html)) examples.\n\nNote that recording both audio and video into a single WebM file is currently\nonly supported in Mozilla Firefox >= 29. In the Chrome browser two separate\nBlob objects are created: one for audio and one for video.\n\n### Audio-only\n\n![Audio-only screenshot](examples/img/audio-only.png?raw=true \"Audio-only screenshot\")\n\nWhen recording audio-only, also include the wavesurfer.js library and\nthe videojs-wavesurfer and microphone plugins. Make sure to place this before\nthe `videojs.record.js` script.\n\n```html\n<script src=\"http://wavesurfer-js.org/dist/wavesurfer.min.js\"></script>\n<script src=\"http://wavesurfer-js.org/dist/plugin/wavesurfer.microphone.min.js\"></script>\n<script src=\"videojs.wavesurfer.js\"></script>\n```\n\nAnd define an `audio` element:\n\n```html\n<audio id=\"myAudio\" class=\"video-js vjs-default-skin\"></audio>\n```\n\nCheck out the full audio-only example ([demo](https://collab-project.github.io/videojs-record/examples/audio-only.html) / [source](https://github.com/collab-project/videojs-record/blob/master/examples/audio-only.html)).\n\nOptions\n-------\n\nConfigure the player using the video.js\n[options](https://github.com/videojs/video.js/blob/master/docs/guides/options.md),\nand enable the plugin by adding a `record` configuration to `plugins`. For\nexample:\n\n```javascript\nvar player = videojs(\"myVideo\",\n{\n    controls: true,\n    loop: false,\n    width: 320,\n    height: 240,\n    plugins: {\n        record: {\n            image: false,\n            audio: false,\n            video: true,\n            maxLength: 5\n        }\n    }\n});\n```\n\nThe available options for this plugin are:\n\n| Option | Type | Default | Description |\n| --- | --- | --- | --- |\n| `image` | boolean | `false` | Create single snapshot image. |\n| `audio` | boolean | `false` | Include audio in the recorded clip. |\n| `video` | boolean | `false` | Include video in the recorded clip. |\n| `animation` | boolean | `false` | Animated GIF. |\n| `maxLength` | float | `10` | Maximum length of the recorded clip. |\n| `audioEngine` | string | `recordrtc` | Audio recording library to use. Legal values are `recordrtc` and `libvorbis.js`. |\n| `audioBufferSize` | float | `4096` | The size of the audio buffer (in sample-frames per second). Legal values: 0, 256, 512, 1024, 2048, 4096, 8192 and 16384. |\n| `audioSampleRate` | float | `44100` | The audio sample rate (in sample-frames per second) at which the `AudioContext` handles audio. Legal values are in the range of 22050 to 96000. |\n| `audioWorkerURL` | string | `''` | URL for the audio worker, for example: `libvorbis.oggvbr.asyncencoder.worker.min.js`. Currently only used for libvorbis.js. |\n| `audioModuleURL` | string | `''` | URL for the audio module, for example: `libvorbis.asmjs.min.js`. Currently only used for libvorbis.js. |\n| `animationFrameRate` | float | `200` | Frame rate for animated GIF (in frames per second). |\n| `animationQuality` | float | `10` | Sets quality of color quantization (conversion of images to the maximum 256 colors allowed by the GIF specification). Lower values (minimum = 1) produce better colors, but slow processing significantly. The default produces good color mapping at reasonable speeds. Values greater than 20 do not yield significant improvements in speed. |\n| `debug` | boolean | `false` | Enables console log messages. |\n\nMethods\n-------\n\nMethods for this plugin documented below are available on the `recorder` object\nof the video.js player instance. For example:\n\n```javascript\nplayer.recorder.destroy();\n```\n\n| Method | Description |\n| --- | --- |\n| `isRecording` | Returns a boolean indicating whether recording is active or not. |\n| `getRecordType` | Get recorder type as string. Either `image_only`, `animation`, `audio_only`, `video_only` or `audio_video`. |\n| `destroy` | Destroys the recorder instance and children (including the video.js player). |\n| `stopDevice` | Stop the recording and the active audio and/or video device(s). |\n| `getDevice` | Start the audio and/or video device(s). |\n\nEvents\n------\n\nPlugin events that are available on the video.js player instance. For example:\n\n```javascript\nplayer.on('startRecord', function()\n{\n    console.log('started recording!');\n});\n```\n\n| Event | Description |\n| --- | --- |\n| `deviceReady` | The webcam and/or microphone is ready to use. |\n| `deviceError` | User doesn't allow the browser to access the webcam and/or microphone. Check `player.deviceErrorCode` for the specific [error code](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia#errorCallback). |\n| `startRecord` | User pressed the record or camera button to start recording. |\n| `stopRecord` | User pressed the stop button to stop recording. |\n| `finishRecord` | The recorded stream or image is available. Check the `player.recordedData` object for the recorded data. |\n\nGet recorded data\n-----------------\n\nListen for the `finishRecord` event and obtain the recorded data from the\n`player.recordedData` object for further processing:\n\n```javascript\n// user completed recording and stream is available\nplayer.on('finishRecord', function()\n{\n    // the recordedData object contains the stream data that\n    // can be downloaded by the user, stored on server etc.\n    console.log('finished recording: ', player.recordedData);\n});\n```\n\nNote that in the Chrome browser `player.recordedData` returns an object with\n`audio` and `video` properties when recording both audio/video. In Firefox\nit returns a single WebM Blob object containing both audio and video.\n\nCustomizing controls\n--------------------\n\nTo disable and hide specific controls, use the video.js `controlBar`\noption:\n\n```javascript\ncontrolBar: {\n    // hide volume and fullscreen controls\n    volumeMenuButton: false,\n    fullscreenToggle: false\n},\n```\n\nOther output formats\n--------------------\n\nMicrophone recordings can result in large audio files, especially when there is no native\nsupport for other audio formats (.ogg for example) in the browser (like Chrome).\nlibvorbis.js provides a Javascript implementation of a PCM to Ogg Vorbis encoder and\nyou can choose to use this instead of RecordRTC (currently only available when recording\naudio-only).\n\nInclude the libvorbis.js library (instead of RecordRTC.js) and place it before\nany other scripts:\n\n```html\n<script src=\"/path/to/libvorbis.oggvbr.asyncencoder.min.js\" async></script>\n```\n\nAnd specify the `libvorbis.js` `audioEngine`, `audioWorkerURL` and\n`audioModuleURL` options.\n\nCheck out the audio-only Ogg example ([demo](https://collab-project.github.io/videojs-record/examples/audio-only-ogg.html) / [source](https://github.com/collab-project/videojs-record/blob/master/examples/audio-only-ogg.html)).\n\n\nLocalization\n------------\n\nThis plugin supports multiple languages. Each language has it's own file\n(found in the `lang` directory) that contains the translated text.\n\nUsing a different language, for example Dutch (`nl`), is done by including\nthe Video.js language file and the plugin's language file:\n\n```html\n<script src=\"videojs-record/dist/lang/nl.js\"></script>\n<script src=\"//vjs.zencdn.net/5.0/lang/nl.js\"></script>\n```\n\nAnd setting the Video.js player's `language` option:\n\n```javascript\nlanguage: \"nl\"\n```\n\nAdding support for an additional language is done by adding a new file with\na filename that consists of the countrycode and the `.json` extension, eg.\n`fr.json`. The [build script](#development) compiles the JSON into a usable\nlanguage file, eg. `fr.js`. Check the Video.js wiki for a\n[list of supported countrycodes](https://github.com/videojs/video.js/blob/master/docs/guides/languages.md#language-codes).\nPull requests to add more languages to this plugin are always welcome!\n\n\nMore features using other plugins\n---------------------------------\n\nThe Video.js community created\n[lots of plugins](https://github.com/videojs/video.js/wiki/Plugins)\nthat can be used to enhance the player's functionality. Plugins actually\ntested with `videojs-record`:\n\n- [videojs-persistvolume](https://github.com/theonion/videojs-persistvolume) -\n  Saves user's volume setting using `localStorage`, but falls back to cookies\n  if necessary.\n\nDevelopment\n-----------\n\nInstall `grunt-cli`:\n\n```\nsudo npm install -g grunt-cli\n```\n\nInstall dependencies using npm:\n\n```\nnpm install\n```\n\nOr using bower:\n\n```\nbower install\n```\n\nBuild a minified version:\n\n```\ngrunt\n```\n\nGenerated files are placed in the `dist` directory.\n\nLicense\n-------\n\nThis work is licensed under the [MIT License](LICENSE).\n","version":"1.0.2","downloads":287},{"name":"videojs-resolution-switcher","description":"Resolution switcher for video.js 5","author":{"name":"Kasper Moskwiak","email":"kasper.moskwiak@gmail.com","url":"http://kspr.pl"},"keywords":["videojs","html5","flash","video","player","resolution","source","videojs-plugin"],"license":"Apache-2.0","time":{"modified":"2015-10-31T20:09:10.787Z","created":"2015-09-29T18:59:48.312Z","0.1.0":"2015-09-29T18:59:48.312Z","0.1.1":"2015-09-29T19:06:07.271Z","0.1.2":"2015-10-17T23:04:26.258Z","0.1.3":"2015-10-28T19:51:17.758Z","0.1.4":"2015-10-29T20:21:53.176Z","0.1.5":"2015-10-31T11:29:33.071Z","0.2.0":"2015-10-31T20:09:10.787Z"},"readme":"# Video.js Resolution Switcher\n\nResolution switcher for [video.js v5](https://github.com/videojs/video.js)\n\n## Getting Started\n\nInstall plugin with\n\n**npm**\n```\nnpm i videojs-resolution-switcher\n```\n\nor **bower**\n```\nbower install videojs-resolution-switcher\n```\n\n\n### Setup sources dynamically:\n\n```html\n<video id='video' class=\"video-js vjs-default-skin\"></video>\n<script src=\"video.js\"></script>\n<script src=\"videojs-resolution-switcher.js\"></script>\n<script>\n  videojs('video', {\n    controls: true,\n    plugins: {\n        videoJsResolutionSwitcher: {\n          default: 'high',\n          dynamicLabel: true\n        }\n      }\n  }, function(){\n  \n    // Add dynamically sources via updateSrc method\n    player.updateSrc([\n        {\n          src: 'http://media.xiph.org/mango/tears_of_steel_1080p.webm',\n          type: 'video/webm',\n          label: '360'\n        },\n        {\n          src: 'http://mirrorblender.top-ix.org/movies/sintel-1024-surround.mp4',\n          type: 'video/mp4',\n          label: '720'\n        }\n      ])\n\n      player.on('resolutionchange', function(){\n        console.info('Source changed to %s', player.src())\n      })\n      \n  })\n</script>\n```\n\n### Or use `<source>` tags:\n\n```html\n\n<video id=\"video\" class=\"video-js vjs-default-skin\" width=\"1000\" controls data-setup='{}'>\n   <source src=\"http://mirrorblender.top-ix.org/movies/sintel-1024-surround.mp4\" type='video/mp4' label='SD' />\n   <source src=\"http://media.xiph.org/mango/tears_of_steel_1080p.webm\" type='video/webm' label='HD'/>\n</video>\n<script>\n  videojs('video').videoJsResolutionSwitcher()\n</script>\n\n```\n\n### Flash tech\n\nWhen using flash tech `preload=\"auto\"` is required.\n\n## Source options\n\nSources can passed to player using `updateSrc` method or `<source>` tag as shown above. Avalible options for each source are:\n* label - `String` (required) is shown in menu (ex. 'SD' or '360p')\n* res - `Number` is resolution of video used for sorting (ex. 360 or 1080)\n\n## Plugin options\n\nYou can pass options to plugin like this:\n\n```javascript\n\nvideojs('video', {\n      controls: true,\n      muted: true,\n      width: 1000,\n      plugins: {\n        videoJsResolutionSwitcher: {\n          default: 'low'\n        }\n      }\n    }, function(){\n      // this is player\n    })\n```\n### Avalible options:\n* default - `{Number}|'low'|'high'` - default resolution. If any `Number` is passed plugin will try to choose source based on `res` parameter. If `low` or `high` is passed, plugin will choose respectively worse or best resolution (if `res` parameter is specified). If `res` parameter is not specified plugin assumes that sources array is sorted from best to worse.\n* dynamicLabel - `{Boolean}` - if `true` current label will be displayed in control bar. By default gear icon is displayed.\n\n## Example\n\n[Working example](example.html) of the plugin you can check out if you're having trouble. Or check out this [demo](https://kmoskwiak.github.io/videojs-resolution-switcher/).\n\n## Methods\n\n\n### updateSrc([source])\nReturns video.js player object if used as setter. If `source` is not passed it acts like [player.src()](http://docs.videojs.com/docs/api/player.html#Methodssrc)\n```javascript\n\n// Update video sources\nplayer.updateSrc([\n  { type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\", label: 'SD' },\n  { type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\", label: 'HD' },\n  { type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\", label: '4k' }\n])\n\n```\n#### PARAMETERS:\n| name | type | required | description |\n|:----:|:----:|:--------:|:-----------:|\n| source| array| no | array of sources |\n\n### currentResolution([label])\nIf used as getter returns current resolution object:\n```javascript\n  {\n    label: 'SD', // current label\n    sources: [\n      { type: \"video/webm\", src: \"http://www.example.com/path/to/video.webm\", label: 'SD' },\n      { type: \"video/mp4\", src: \"http://www.example.com/path/to/video.mp4\", label: 'SD' }\n    ] // array of sources with current label\n  }\n```\n\nIf used as setter returns video.js player object.\n\n\n```javascript\n\n// Get current resolution\nplayer.currentResolution(); // returns object {label '', sources: []}\n\n// Set resolution\nplayer.currentResolution('SD'); // returns videojs player object\n```\n#### PARAMETERS:\n| name | type | required | description |\n|:----:|:----:|:--------:|:-----------:|\n| label| string| no | label name |\n\n\n## Events\n\n### resolutionchange `EVENT`\n\n> Fired when resolution is changed\n\n\n","version":"0.2.0","downloads":145},{"name":"videojs-wavesurfer","description":"video.js plugin that adds a navigable waveform for audio and video files.","keywords":["waveform","audio","video","wavesurfer","videojs","videojs-plugin","player"],"license":"MIT","time":{"modified":"2015-10-15T12:43:18.300Z","created":"2014-11-14T15:51:28.844Z","0.3.0":"2014-11-14T15:51:28.844Z","0.4.0":"2014-11-19T23:03:39.948Z","0.6.0":"2014-11-25T20:10:28.193Z","0.7.0":"2014-12-08T19:59:32.811Z","0.8.0":"2014-12-17T14:33:34.505Z","0.8.1":"2014-12-17T17:37:10.639Z","0.9.0":"2015-01-06T20:12:32.985Z","0.9.1":"2015-01-14T19:48:15.431Z","0.9.2":"2015-02-18T16:08:25.761Z","0.9.3":"2015-02-18T16:20:07.144Z","0.9.4":"2015-02-18T18:46:27.466Z","0.9.5":"2015-03-03T17:38:43.866Z","0.9.6":"2015-03-19T18:31:05.552Z","0.9.7":"2015-08-26T22:54:04.233Z","0.9.8":"2015-10-04T00:50:20.965Z","0.9.9":"2015-10-06T08:37:02.423Z","1.0.0":"2015-10-12T19:50:30.900Z","1.0.1":"2015-10-13T22:09:17.154Z","1.0.2":"2015-10-15T11:48:22.510Z","1.0.3":"2015-10-15T12:43:18.300Z"},"readme":"Video.js Wavesurfer\n===================\n\nA [video.js](http://www.videojs.com/) plugin that adds a navigable waveform\nfor audio and video files, using the [wavesurfer.js](https://github.com/katspaugh/wavesurfer.js)\nlibrary. Includes support for fullscreen mode and [real-time visualization of microphone\ninput](#microphone-plugin).\n\n![Screenshot](examples/img/screenshot.png?raw=true \"Screenshot\")\n\n[![npm version](https://img.shields.io/npm/v/videojs-wavesurfer.svg?style=flat)](https://www.npmjs.com/package/videojs-wavesurfer)\n[![npm](https://img.shields.io/npm/dm/videojs-wavesurfer.svg)]()\n[![License](https://img.shields.io/npm/l/videojs-wavesurfer.svg)](LICENSE)\n[![Build Status](https://travis-ci.org/collab-project/videojs-wavesurfer.svg?branch=master)](https://travis-ci.org/collab-project/videojs-wavesurfer)\n\nInstallation\n------------\n\nYou can use [bower](http://bower.io) (`bower install videojs-wavesurfer`) or\n[npm](https://www.npmjs.org) (`npm install videojs-wavesurfer`) to install the\nplugin, or\n[download it here](https://github.com/collab-project/videojs-wavesurfer/releases).\n\nSince v1.0 this plugin is compatible with video.js 5.0 and newer. If you want to use\nthis plugin with an older video.js 4.x version, check the\n[archived releases](https://github.com/collab-project/videojs-wavesurfer/releases)\nfor a 0.9.x or older release of this plugin.\n\nUsing the Plugin\n----------------\n\nThe plugin depends on the wavesurfer.js and video.js packages:\n\n```html\n<link href=\"//vjs.zencdn.net/5.0/video-js.css\" rel=\"stylesheet\">\n\n<script src=\"//katspaugh.github.io/wavesurfer.js/dist/wavesurfer.min.js\"></script>\n<script src=\"//vjs.zencdn.net/5.0/video.js\"></script>\n```\n\nThe plugin automatically registers itself when you include `videojs.wavesurfer.js`\non your page:\n\n```html\n<script src=\"videojs.wavesurfer.js\"></script>\n```\n\nAdd an `audio` element:\n\n```html\n<audio id=\"myClip\" class=\"video-js vjs-default-skin\"></audio>\n```\n\nOr `video` element:\n\n```html\n<video id=\"myClip\" class=\"video-js vjs-default-skin\"></video>\n```\n\nPlugin Options\n--------------\n\nConfigure the player using the video.js\n[options](https://github.com/videojs/video.js/blob/master/docs/guides/options.md),\nand enable the plugin by adding a `wavesurfer` entry with the related wavesurfer.js\n[options](https://github.com/katspaugh/wavesurfer.js#wavesurfer-options):\n\n```javascript\nvar player = videojs(\"myClip\",\n{\n    controls: true,\n    autoplay: true,\n    loop: false,\n    width: 600,\n    height: 300,\n    plugins: {\n        wavesurfer: {\n            src: \"media/heres_johnny.wav\",\n            msDisplayMax: 10,\n            waveColor: \"grey\",\n            progressColor: \"black\",\n            cursorColor: \"black\",\n            hideScrollbar: true\n        }\n    }\n});\n```\n\nSee the full audio example ([demo](https://collab-project.github.io/videojs-wavesurfer/examples/index.html) or [source](https://github.com/collab-project/videojs-wavesurfer/blob/master/examples/index.html)) and\nthe video example ([demo](https://collab-project.github.io/videojs-wavesurfer/examples/video.html) or [source](https://github.com/collab-project/videojs-wavesurfer/blob/master/examples/video.html)).\n\nThe additional options for this plugin are:\n\n| option | type | default | description |\n| --- | --- | --- | --- |\n| `src` | string | `null` | The URL of the audio/video file or `'live'` when [using the microphone plugin](#microphone-plugin).|\n| `msDisplayMax` | float | `3` | Indicates the number of seconds that is considered the boundary value for displaying milliseconds in the time controls. An audio clip with a total length of 2 seconds and a `msDisplayMax` of 3 will use the format `M:SS:MMM`. Clips with a duration that is longer than `msDisplayMax` will be displayed as `M:SS` or `HH:MM:SS`.|\n\nCustomizing controls\n--------------------\n\nIf you want to disable and hide specific controls, use the video.js `children`\noption:\n\n```javascript\nchildren: {\n    controlBar: {\n        children: {\n            // hide fullscreen control\n            fullscreenToggle: false\n        }\n    }\n},\n```\n\nMicrophone plugin\n-----------------\n\nIt's also possible to use a microphone for real-time rendering of the audio waveform. This\nuses the [microphone plugin](https://github.com/katspaugh/wavesurfer.js/blob/master/plugin/wavesurfer.microphone.js)\nthat comes with wavesurfer.js.\n\nInclude the additional `wavesurfer.microphone.js` plugin on your page:\n\n```html\n<script src=\"//katspaugh.github.io/wavesurfer.js/dist/plugin/wavesurfer.microphone.min.js\"></script>\n```\n\nAdd an `audio` element:\n\n```html\n<audio id=\"myLiveAudio\" class=\"video-js vjs-default-skin\"></audio>\n```\n\nConfigure the player: use the value `'live'` for the `src` option:\n\n```javascript\nvar player = videojs(\"myLiveAudio\",\n{\n    controls: true,\n    width: 600,\n    height: 300,\n    plugins: {\n        wavesurfer: {\n            src: \"live\",\n            waveColor: \"black\",\n            cursorWidth: 0,\n            interact: false\n        }\n    }\n});\n```\n\nSee the full live example\n([demo](https://collab-project.github.io/videojs-wavesurfer/examples/live.html) or\n[source](https://github.com/collab-project/videojs-wavesurfer/blob/master/examples/live.html)).\n\n\nMore features using other plugins\n---------------------------------\n\nThe Video.js community created\n[lots of plugins](https://github.com/videojs/video.js/wiki/Plugins)\nthat can be used to enhance the player's functionality. Plugins actually\ntested with `videojs-wavesurfer`:\n\n- [videojs-record](https://github.com/collab-project/videojs-record) - Adds\n  support for recording audio/video files.\n- [videojs-persistvolume](https://github.com/theonion/videojs-persistvolume) -\n  Saves user's volume setting using `localStorage`, but falls back to cookies\n  if necessary.\n\n\nContributing\n------------\n\nInstall `grunt-cli`:\n\n```\nsudo npm install -g grunt-cli\n```\n\nInstall dependencies using npm:\n\n```\nnpm install\n```\n\nOr using bower:\n\n```\nbower install\n```\n\nBuild a minified version:\n\n```\ngrunt\n```\n\nGenerated files are placed in the `dist` directory.\n\nLicense\n-------\n\nThis work is licensed under the [MIT License](LICENSE).\n","version":"1.0.3","downloads":363},{"name":"videojs-skin-colors","description":"Videojs default skin with pretty colors","author":{"name":"Matthew McClure","email":"m@mmcc.io"},"keywords":["videojs","videojs-skin"],"license":"MIT","time":{"modified":"2015-01-17T20:01:29.248Z","created":"2015-01-13T04:13:59.184Z","1.0.0":"2015-01-13T04:13:59.184Z","1.0.3":"2015-01-17T20:01:29.248Z"},"readme":"# videojs-theme-colors\nColor variants of the default theme. To use, simply add the class of the color scheme you'd like to use for your player.\nFor instance, if you'd like to use the \"blue\" theme, add the class `vjs-theme-colors-blue` to your player.\n","version":"1.0.3","downloads":17},{"name":"videojs-skin-twitchy","description":"Videojs skin that happens to resemble a certain video game streaming site","author":{"name":"Matthew McClure","email":"m@mmcc.io"},"keywords":["videojs","videojs-skin"],"license":"MIT","time":{"modified":"2015-01-16T07:15:52.703Z","created":"2015-01-15T05:07:53.222Z","1.0.0":"2015-01-15T05:07:53.222Z","1.0.2":"2015-01-16T07:15:52.703Z"},"readme":"# videojs-skin-twitchy\n\nVideojs skin that happens to resemble a certain video game streaming site.\n","version":"1.0.2","downloads":17}]