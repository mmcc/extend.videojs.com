[{"name":"videojs-contrib-hls","description":"A video.js tech that plays HLS video on platforms that don't support it but have Flash.","keywords":["videojs","videojs-plugin"],"license":"Apache 2","time":{"modified":"2015-04-28T22:10:26.719Z","created":"2014-04-11T22:28:32.355Z","0.4.0":"2014-04-11T22:28:32.355Z","0.4.1":"2014-04-14T21:10:08.474Z","0.5.0":"2014-04-18T15:00:29.624Z","0.6.0":"2014-05-16T19:00:42.402Z","0.7.0":"2014-05-30T15:58:05.491Z","0.7.1":"2014-06-05T16:51:40.300Z","0.7.2":"2014-06-13T16:10:30.138Z","0.8.0":"2014-06-26T17:56:30.403Z","0.8.1":"2014-07-02T19:30:13.980Z","0.8.2":"2014-07-09T17:23:23.340Z","0.8.3":"2014-07-25T15:37:19.103Z","0.8.4":"2014-08-15T19:34:53.355Z","0.9.0":"2014-09-09T13:49:33.023Z","0.9.1":"2014-09-29T20:28:08.751Z","0.9.2":"2014-10-10T16:00:13.816Z","0.10.0":"2014-10-31T14:18:05.863Z","0.10.1":"2014-11-25T22:36:01.876Z","0.10.2":"2015-01-06T19:54:31.001Z","0.10.3":"2015-01-07T22:03:00.685Z","0.10.4":"2015-02-09T18:42:04.793Z","0.11.0":"2015-03-02T23:02:56.436Z","0.11.1":"2015-03-11T21:31:44.454Z","0.11.2":"2015-03-20T18:55:50.510Z","0.12.0":"2015-04-02T21:17:37.146Z","0.13.0":"2015-04-16T20:32:57.125Z","0.13.1":"2015-04-28T22:10:26.719Z"},"readme":"# video.js HLS Tech\n\nA video.js tech that plays HLS video on platforms that don't support it but have Flash.\n\n[![Build Status](https://travis-ci.org/videojs/videojs-contrib-hls.svg?branch=master)](https://travis-ci.org/videojs/videojs-contrib-hls)\n\n## Getting Started\nDownload the [Media Source plugin](https://github.com/videojs/videojs-contrib-media-sources/releases) as well as the [HLS tech](https://github.com/videojs/videojs-contrib-hls/releases). On your web page:\n\n```html\n<script src=\"video.js\"></script>\n<script src=\"videojs-media-sources.js\"></script>\n<script src=\"videojs-hls.min.js\"></script>\n<script>\n  var player = videojs('test-vid');\n  player.play();\n</script>\n```\n\n## Documentation\n[HTTP Live Streaming](https://developer.apple.com/streaming/) (HLS) has\nbecome a de-facto standard for streaming video on mobile devices\nthanks to its native support on iOS and Android. There are a number of\nreasons independent of platform to recommend the format, though:\n\n- Supports (client-driven) adaptive bitrate selection\n- Delivered over standard HTTP ports\n- Simple, text-based manifest format\n- No proprietary streaming servers required\n\nUnfortunately, all the major desktop browsers except for Safari are\nmissing HLS support. That leaves web developers in the unfortunate\nposition of having to maintain alternate renditions of the same video\nand potentially having to forego HTML-based video entirely to provide\nthe best desktop viewing experience.\n\nThis tech attempts to address that situation by providing a polyfill\nfor HLS on browsers that have Flash support. You can deploy a single\nHLS stream, code against the regular HTML5 video APIs, and create a\nfast, high-quality video experience across all the big web device\ncategories.\n\nCheck out the [full documentation](docs/) for details on how HLS works\nand advanced configuration. A description of the [adaptive switching\nbehavior](docs/bitrate-switching.md) is available, too.\n\nThe videojs-hls tech is still working towards a 1.0 release so it\nmay not fit your requirements today. Specifically, there is _no_\nsupport for:\n\n- Alternate audio and video tracks\n- Subtitles\n- Segment codecs _other than_ H.264 with AAC audio\n- Internet Explorer < 10\n\n### Options\n\nYou may pass in an options object to the hls tech at player\ninitialization. You can pass in options just like you would for any\nother tech:\n\n```javascript\nvideojs(video, {\n  hls: {\n    withCredentials: true\n  }\n});\n```\n\n#### withCredentials\nType: `boolean`\n\nWhen the `withCredentials` property is set to `true`, all XHR requests for\nmanifests and segments would have `withCredentials` set to `true` as well. This\nenables storing and passing cookies from the server that the manifests and\nsegments live on. This has some implications on CORS because when set, the\n`Access-Control-Allow-Origin` header cannot be set to `*`, also, the response\nheaders require the addition of `Access-Control-Allow-Credentials` header which\nis set to `true`.\nSee html5rocks's [article](http://www.html5rocks.com/en/tutorials/cors/)\nfor more info.\n\n### Runtime Properties\n#### player.hls.playlists.master\nType: `object`\n\nAn object representing the parsed master playlist. If a media playlist\nis loaded directly, a master playlist with only one entry will be\ncreated.\n\n#### player.hls.playlists.media\nType: `function`\n\nA function that can be used to retrieve or modify the currently active\nmedia playlist. The active media playlist is referred to when\nadditional video data needs to be downloaded. Calling this function\nwith no arguments returns the parsed playlist object for the active\nmedia playlist. Calling this function with a playlist object from the\nmaster playlist or a URI string as specified in the master playlist\nwill kick off an asynchronous load of the specified media\nplaylist. Once it has been retreived, it will become the active media\nplaylist.\n\n#### player.hls.mediaIndex\nType: `number`\n\nThe index of the next video segment to be downloaded from\n`player.hls.media`.\n\n#### player.hls.segmentXhrTime\nType: `number`\n\nThe number of milliseconds it took to download the last media segment.\nThis value is updated after each segment download completes.\n\n#### player.hls.bandwidth\nType: `number`\n\nThe number of bits downloaded per second in the last segment download.\nThis value is used by the default implementation of `selectPlaylist`\nto select an appropriate bitrate to play.\n\nBefore the first video segment has been downloaded, it's hard to\nestimate bandwidth accurately. The HLS tech uses a heuristic based on\nthe playlist download times to do this estimation by default. If you\nhave a more accurate source of bandwidth information, you can override\nthis value as soon as the HLS tech has loaded to provide an initial\nbandwidth estimate.\n\n#### player.hls.bytesReceived\nType: `number`\n\nThe total number of content bytes downloaded by the HLS tech.\n\n#### player.hls.selectPlaylist\nType: `function`\n\nA function that returns the media playlist object to use to download\nthe next segment. It is invoked by the tech immediately before a new\nsegment is downloaded. You can override this function to provide your\nadaptive streaming logic. You must, however, be sure to return a valid\nmedia playlist object that is present in `player.hls.master`.\n\n### Events\n#### loadedmetadata\n\nFired after the first media playlist is downloaded for a stream.\n\n#### loadedplaylist\n\nFired immediately after a new master or media playlist has been\ndownloaded. By default, the tech only downloads playlists as they\nare needed.\n\n#### mediachange\n\nFired when a new playlist becomes the active media playlist. Note that\nthe actual rendering quality change does not occur simultaneously with\nthis event; a new segment must be requested and the existing buffer\ndepleted first.\n\n### In-Band Metadata\nThe HLS tech supports [timed\nmetadata](https://developer.apple.com/library/ios/#documentation/AudioVideo/Conceptual/HTTP_Live_Streaming_Metadata_Spec/Introduction/Introduction.html)\nembedded as [ID3 tags](http://id3.org/id3v2.3.0). When a stream is\nencountered with embedded metadata, an [in-band metadata text\ntrack](https://html.spec.whatwg.org/multipage/embedded-content.html#text-track-in-band-metadata-track-dispatch-type)\nwill automatically be created and populated with cues as they are\nencountered in the stream. Only UTF-8 encoded\n[TXXX](http://id3.org/id3v2.3.0#User_defined_text_information_frame)\nand [WXXX](http://id3.org/id3v2.3.0#User_defined_URL_link_frame) ID3\nframes are currently mapped to cue points. There are lots of guides\nand references to using text tracks [around the\nweb](http://www.html5rocks.com/en/tutorials/track/basics/).\n\n### Testing\n\nFor testing, you can either run `npm test` or use `grunt` directly.\nIf you use `npm test`, it will only run the karma tests using chrome.\nYou can specify which browsers you want the tests to run via grunt's `test` task.\nYou can use either grunt-style arguments or comma separated arguments:\n```\ngrunt test:chrome:firefox\t# grunt-style\ngrunt test:chrome,firefox\t# comma-separated\n```\nPossible options are:\n* `chromecanary`\n* `phantomjs`\n* `opera`\n* `chrome`\n* `safari`\n* `firefox`\n* `ie`\n\n## Hosting Considerations\nUnlike a native HLS implementation, the HLS tech has to comply with\nthe browser's security policies. That means that all the files that\nmake up the stream must be served from the same domain as the page\nhosting the video player or from a server that has appropriate [CORS\nheaders](https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS)\nconfigured. Easy [instructions are\navailable](http://enable-cors.org/server.html) for popular webservers\nand most CDNs should have no trouble turning CORS on for your account.\n\n## Release History\n- 0.13.0:\n  - Improved audio/video synchronization\n  - Fixes for live, HLSe, and discontinuities\n  - Rename internal methods to clarify their intended visibility\n- 0.12.0: support for custom IVs with AES-128 encryption\n- 0.11.0: embedded ID3 tags are exposed as an in-band metadata track\n- 0.10.0: optimistic initial bitrate selection\n- 0.9.0: support segment level AES-128 encryption\n- 0.8.0: support for EXT-X-DISCONTINUITY\n- 0.7.0: convert the HLS plugin to a tech\n- 0.6.0:\n  - Refactor playlist loading\n  - Add testing via karma\n- 0.5.0: cookie-based content protection support (see `withCredentials`)\n- 0.4.0: Live stream support\n- 0.3.0: Performance fixes for high-bitrate streams\n- 0.2.0: Basic playback and adaptive bitrate selection\n- 0.1.0: Initial release\n","version":"0.13.1","downloads":594},{"name":"videojs-playlist","description":"Playlist plugin for videojs","author":{"name":"Gary Katsevman","email":"me@gkatsev.com"},"keywords":["videojs-plugin","playlist","videojs"],"license":"Apache 2.0","time":{"modified":"2015-04-09T16:34:08.185Z","created":"2015-03-30T19:36:21.025Z","1.0.0":"2015-03-30T19:36:21.025Z","1.0.1":"2015-03-30T19:56:41.488Z","1.0.2":"2015-04-09T16:34:08.185Z"},"readme":"[![Build Status](https://travis-ci.org/brightcove/videojs-playlist.svg?branch=master)](https://travis-ci.org/brightcove/videojs-playlist)\n\n# Playlist plugin for videojs\n\n## Usage\n\n```js\nrequire('videojs-playlist');\n\nvar player = videojs('video');\nplayer.playlist([{\n  sources: [{\n    src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/bunny/trailer.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n}, {\n  sources: [{\n    src: 'http://vjs.zencdn.net/v/oceans.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://www.videojs.com/img/poster.jpg'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/bunny/movie.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n}, {\n  sources: [{\n    src: 'http://media.w3.org/2010/05/video/movie_300.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/video/poster.png'\n}]);\n\nplayer.playlist.next();\n```\n\n## API\n\n* [Methods](#methods)\n  * [`player.playlist([Array newPlaylist])`](#playerplaylistarray-newplaylist---array)\n  * [`player.playlist.currentItem([Number newIndex])`](#playerplaylistcurrentitemnumber-newindex---number)\n  * [`player.playlist.contains(Any item)`](#playerplaylistcontainsany-item---boolean)\n  * [`player.playlist.indexOf(Any item)`](#playerplaylistindexofany-item---number)\n  * [`player.playlist.next()`](#playerplaylistnext---object)\n  * [`player.playlist.previous()`](#playerplaylistprevious---object)\n  * [`player.playlist.autoadvance()`](#playerplaylistautoadvancenumber-timeout---undefined)\n* [Events](#events)\n  * [`playlistchange`](#playlistchange)\n\n### Methods\n#### `player.playlist([Array newPlaylist]) -> Array`\nThis function allows you to either set or get the current playlist.\nIf called without arguments, it is a getter, with an argument, it is a setter.\n\n```js\nplayer.playlist();\n// [{\n//   sources: [{\n//     src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n//     type: 'video/mp4'\n//   }],\n//   poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n// }, {\n//   sources: [{\n//     src: 'http://media.w3.org/2010/05/bunny/trailer.mp4',\n//     type: 'video/mp4'\n//   }],\n// ...\n\nplayer.playlist([{\n  sources: [{\n    src: 'http://media.w3.org/2010/05/video/movie_300.mp4',\n    type: 'video/mp4'\n  }],\n  poster: 'http://media.w3.org/2010/05/video/poster.png'\n}]);\n// [{\n//   sources: [{\n//     src: 'http://media.w3.org/2010/05/video/movie_300.mp4',\n//     type: 'video/mp4'\n//   }],\n//   poster: 'http://media.w3.org/2010/05/video/poster.png'\n// }]\n```\n\n#### `player.playlist.currentItem([Number newIndex]) -> Number`\nThis functions allows you to either set or get the current item index.\nIf called without arguments, it is a getter, with an argument, it is a setter.\n\nIf the player is currently playing a non-playlist video, `currentItem` will return `-1`.\n\n```js\nplayer.currentItem();\n// 0\n\nplayer.currentItem(2);\n// 2\n```\n\n```js\nplayer.playlist(samplePlaylist);\nplayer.src('http://example.com/video.mp4');\nplayer.playlist.currentItem(); // -1\n```\n\n#### `player.playlist.contains(Any item) -> Boolean`\nThis function allows you to ask the playlist whether a string, source object, or playlist item is contained within it.\nAssuming the above playlist, consider the following example:\n\n```js\nplaylist.contains('http://media.w3.org/2010/05/sintel/trailer.mp4')\n// true\n\nplaylist.contains([{\n  src: 'http://media.w3.org/2010/05/sintel/poster.png',\n  type: 'image/png'\n}])\n// false\n\nplaylist.contains({\n  sources: [{\n    src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n    type: 'video/mp4'\n  }]\n});\n// true\n```\n\n#### `player.playlist.indexOf(Any item) -> Number`\nThis function allows you to ask the playlist whether a string, source object, or playlist item is contained within it and at what index. It returns `-1` for non-existent items, otherwise, the corresponding index.\nAssuming the above playlist, consider the following example:\n\n```js\nplaylist.indexOf('http://media.w3.org/2010/05/bunny/trailer.mp4')\n// 1\n\nplaylist.contains([{\n  src: 'http://media.w3.org/2010/05/bunny/movie.mp4',\n  type: 'video/mp4'\n}])\n// 3\n\nplaylist.contains({\n  sources: [{\n    src: 'http://media.w3.org/2010/05/video/movie_300.mp4',\n    type: 'video/mp4'\n  }]\n});\n// 4\n```\n\n#### `player.playlist.next() -> Object`\nThis functions allows you to advance to the next item in the playlist. You will receive the new playlist item back from this call. `player.playlist.currentItem` will be updated to return the new index.\nIf you are at the end of the playlist, you will not be able to proceed past the end and instead will not receive anything back;\n\n```js\nplayer.playlist.next();\n// {\n//   sources: [{\n//     src: 'http://media.w3.org/2010/05/bunny/trailer.mp4',\n//     type: 'video/mp4'\n//   }],\n//   poster: 'http://media.w3.org/2010/05/bunny/poster.png'\n// }\n\n\nplayer.playlist.currenItem(player.playlist().length - 1); // set to last item\n// 4\nplayer.playlist.next();\n// undefined\n```\n\n#### `player.playlist.previous() -> Object`\nThis functions allows you to return to the previous item in the playlist. You will receive the new playlist item back from this call. `player.playlist.currentItem` will be updated to return the new index.\nIf you are at the start of the playlist, you will not be able to proceed past the start and instead will not receive anything back;\n\n```js\nplayer.playlist.currenItem(1); // set to second item in the playlist\n// 1\nplayer.playlist.previous();\n// {\n//   sources: [{\n//     src: 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n//     type: 'video/mp4'\n//   }],\n//   poster: 'http://media.w3.org/2010/05/sintel/poster.png'\n// }\n\n\nplayer.playlist.currenItem();\n// 0\nplayer.playlist.previous();\n// undefined\n```\n\n#### `player.playlist.autoadvance([Number timeout]) -> undefined`\nThis function allows you to set up playlist auto advancement. Once enabled it will wait a `timeout` amount of milliseconds at the end of a video before proceeding automatically to the next video.\nAny value which is not a positive, finite, integer, will be treated as a request to cancel and reset the auto advancing.\nIf you change autoadvance during a timeout period, the auto advance will be canceled and it will not advance the next video but it will use the new timeout value for the following videos.\n\n```js\nplayer.playlist.autoadvance(0); // will not wait before loading in the next item\nplayer.playlist.autoadvance(5); // will wait for 5 seconds before loading in the next item\nplayer.playlist.autoadvance(null); // reset and cancel the auto advance\n```\n\n### Events\n\n#### `playlistchange`\nThis event is fired asynchronously whenever the playlist is changed.\nIt is fired asynchronously to let the browser start loading the first video in the new playlist.\n\n```js\nplayer.on('playlistchange', function() {\n  console.log(player.playlist());\n});\n\nplayer.playlist([1,2,3]);\n// [1,2,3]\n\nplayer.playlist([4,5,6]);\n// [4,5,6]\n```\n\n## Development\n\n### npm scripts\n* `npm run build` - Build `dist/bundle.js` file only. Alias for `build-dist`\n* `npm run watch` - Watch and rebuild `dist/bundle.js` and `dist/tests.js` files as necessary\n* `npm run buildall` - Build both `dist/bundle.js` and `dist/tests.js`\n* `npm run build-dist` - Build only `dist/bundle.js`\n* `npm run watch-dist` - watch and rebuild `dist/bundle.js` file as necessary\n* `npm run build-tests` - Build only `dist/tests.js`\n* `npm run watch-tests` - watch and rebuild `dist/tests.js` file as necessary\n* `npm test` - Run jshint on all javascript files, build `dist/tests.js` file, and do a single run of karma\n* `npm run test-watch` - Watch and rebuild `dist/tests.js` file as necessary and run karma watch to re-run tests as necessary\n* `npm run jshint` - Just run jshint on all files\n\n### Building\nYou should either include this project directly in your browserify or you can build it by running\n`npm run build`\n\n### Running tests\nYou can run a single test run, which includes running jshint as well as karma by running\n```sh\nnpm test\n```\nFor development, consider running\n```sh\nnpm run test-watch\n```\nWhich will re-run the karma tests as you save your files to let you know your test results automatically.\n\n## [LICENSE](https://github.com/brightcove/videojs-playlist/blob/master/LICENSE.md)\n","version":"1.0.2","downloads":181},{"name":"videojs-playlist-ui","description":"A playlist video picker for video.js","author":{"name":"Brightcove"},"keywords":["videojs-plugin","playlist","videojs"],"license":"Apache-2.0","time":{"modified":"2015-03-30T19:55:12.132Z","created":"2015-03-30T19:28:42.727Z","1.0.0":"2015-03-30T19:28:42.727Z","1.0.1":"2015-03-30T19:55:12.132Z"},"readme":"[![Build Status](https://travis-ci.org/brightcove/videojs-playlist-ui.svg?branch=master)](https://travis-ci.org/brightcove/videojs-playlist-ui)\n\n# Video.js Playlist UI\n\nA playlist video picker for video.js\n\n## Getting Started\n\nInclude the plugin script in your page, and a placeholder list element\nwith the class `vjs-playlist` to house the playlist menu:\n\n```html\n<!-- Include the playlist menu styles somewhere in your page: -->\n<link href=\"videojs-playlist-ui.vertical.css\" rel=\"stylesheet\">\n\n<!-- The playlist menu will be built automatically in here: -->\n<ol class=\"vjs-playlist\"></ol>\n\n<!-- Include video.js, the videojs-playlist plugin and this plugin: -->\n<script src=\"video.js\"></script>\n<script src=\"videojs-playlist.js\"></script>\n<script src=\"videojs-playlist-ui.js\"></script>\n\n<script>\n  // Now you can initialize the plugin and build the playlist whenever\n  // you're ready!\n  videojs(document.querySelector('video')).playlistUi();\n</script>\n```\n\nThere's also a [working example](example.html) of the plugin you can\ncheck out if you're having trouble.\n\n## Documentation\n\n### Plugin Options\n\nYou may pass in an options object to the plugin upon initialization.\nThe PlaylistMenu is a regular [video.js\nComponent](https://github.com/videojs/video.js/blob/master/docs/guides/components.md)\nso you may pass in [any\noption](https://github.com/videojs/video.js/blob/master/docs/guides/options.md#component-options)\nthat is accepted by Components. In addition, this object may contain\nthis specialized property:\n\n#### className\nType: `string`\nDefault: \"vjs-playlist\"\n\nThe name of the class to search for to populate the playlist menu.\n\n## Playlists and Advertisements\n\nThe Playlist Menu automatically adapts to ad integrations based on\n[videojs-contrib-ads](https://github.com/videojs/videojs-contrib-ads). When\na linear ad is being played, the menu will darken and stop responding\nto click or touch events. If you'd prefer to allow your viewers to\nchange videos during ad playback, you can override this behavior\nthrough CSS. You will also need to make sure that your ad integration\nis properly cancelled and cleaned up before switching-- consult the\ndocumentation for your ad library for details on how to do that.\n\n## Release History\n\n - 0.1.0: Initial release\n","version":"1.0.1","downloads":137},{"name":"videojs-skin-colors","description":"Videojs default skin with pretty colors","author":{"name":"Matthew McClure","email":"m@mmcc.io"},"keywords":["videojs","videojs-skin"],"license":"MIT","time":{"modified":"2015-01-17T20:01:29.248Z","created":"2015-01-13T04:13:59.184Z","1.0.0":"2015-01-13T04:13:59.184Z","1.0.3":"2015-01-17T20:01:29.248Z"},"readme":"# videojs-theme-colors\nColor variants of the default theme. To use, simply add the class of the color scheme you'd like to use for your player.\nFor instance, if you'd like to use the \"blue\" theme, add the class `vjs-theme-colors-blue` to your player.\n","version":"1.0.3","downloads":16},{"name":"videojs-skin-twitchy","description":"Videojs skin that happens to resemble a certain video game streaming site","author":{"name":"Matthew McClure","email":"m@mmcc.io"},"keywords":["videojs","videojs-skin"],"license":"MIT","time":{"modified":"2015-01-16T07:15:52.703Z","created":"2015-01-15T05:07:53.222Z","1.0.0":"2015-01-15T05:07:53.222Z","1.0.2":"2015-01-16T07:15:52.703Z"},"readme":"# videojs-skin-twitchy\n\nVideojs skin that happens to resemble a certain video game streaming site.\n","version":"1.0.2","downloads":18}]